{"version":3,"sources":["Chat.js","App.js","reportWebVitals.js","index.js"],"names":["Chat","_ref","socket","username","room","_useState","useState","_useState2","_slicedToArray","currentMessage","setCurrentMessage","_useState3","_useState4","messageList","setMessageList","sendMessage","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","messageData","wrap","_context","prev","next","author","message","time","Date","now","getHours","getMinutes","emit","list","concat","_toConsumableArray","stop","apply","arguments","useEffect","on","data","_jsxs","className","children","_jsx","ScrollToBottom","map","messageContent","id","type","value","placeholder","onChange","event","target","onKeyPress","key","onClick","io","connect","App","setUsername","setRoom","_useState5","_useState6","showChat","setShowChat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.781f0178.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\n\nfunction Chat({ socket, username, room }) {\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        room: room,\n        author: username,\n        message: currentMessage,\n        time:\n          new Date(Date.now()).getHours() +\n          \":\" +\n          new Date(Date.now()).getMinutes(),\n      };\n\n      await socket.emit(\"send_message\", messageData);\n      setMessageList((list) => [...list, messageData]);\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageList((list) => [...list, data]);\n    });\n  }, [socket]);\n\n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-header\">\n        <p>Live Chat</p>\n      </div>\n      <div className=\"chat-body\">\n        <ScrollToBottom className=\"message-container\">\n          {messageList.map((messageContent) => {\n            return (\n              <div\n                className=\"message\"\n                id={username === messageContent.author ? \"you\" : \"other\"}\n              >\n                <div>\n                  <div className=\"message-content\">\n                    <p>{messageContent.message}</p>\n                  </div>\n                  <div className=\"message-meta\">\n                    <p id=\"time\">{messageContent.time}</p>\n                    <p id=\"author\">{messageContent.author}</p>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </ScrollToBottom>\n      </div>\n      <div className=\"chat-footer\">\n        <input\n          type=\"text\"\n          value={currentMessage}\n          placeholder=\"Hey...\"\n          onChange={(event) => {\n            setCurrentMessage(event.target.value);\n          }}\n          onKeyPress={(event) => {\n            event.key === \"Enter\" && sendMessage();\n          }}\n        />\n        <button onClick={sendMessage}>&#9658;</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import \"./App.css\";\nimport io from \"socket.io-client\";\nimport { useState } from \"react\";\nimport Chat from \"./Chat\";\n\nconst socket = io.connect(\"http://localhost:3001\");\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [showChat, setShowChat] = useState(false);\n\n  const joinRoom = () => {\n    if (username !== \"\" && room !== \"\") {\n      socket.emit(\"join_room\", room);\n      setShowChat(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {!showChat ? (\n        <div className=\"joinChatContainer\">\n          <h3>Join A Chat</h3>\n          <input\n            type=\"text\"\n            placeholder=\"John...\"\n            onChange={(event) => {\n              setUsername(event.target.value);\n            }}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Room ID...\"\n            onChange={(event) => {\n              setRoom(event.target.value);\n            }}\n          />\n          <button onClick={joinRoom}>Join A Room</button>\n        </div>\n      ) : (\n        <Chat socket={socket} username={username} room={room} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}